options {
	LOOKAHEAD = 2;
}

PARSER_BEGIN(Grammar)

public class Grammar {

	static Model model = new Model();

	public static void main(String[] args) throws ParseException{
		Grammar parser = new Grammar(System.in);
		
		try {
			parser.program();
		} catch (ParseException e) {
			throw e;
		}
	}
}

PARSER_END(Grammar)

SKIP :
{
	" "
	| "\r"
	| "\t"
	| "\n"
	// | <"/*" (~[<EOF>])* "*/">
}

TOKEN: /* OPERATORS */
{
	<PLUS: "+">
	| <MINUS: "-">
	| <MULTIPLY: "*">
	| <DIVIDE: "/">
	| <MOD: "%">
	| <UBANG: "!">
	| <LESS_OP: "<">
	| <MORE_OP: ">">
}

TOKEN: /* Reserved words*/
{
	<WHILE: "while">
	| <IF: "if">
	| <ELSE: "else">
	| <BREAK: "break">
	| <RETURN: "return">
	| <CONTINUE: "continue">
}

TOKEN: /* Function names */
{
	<ID: (<LETTER> )+ (<INT>|<LETTER>)* >
	| <#LETTER: ["a"-"z", "A"-"Z"]> 
}

TOKEN: /* numeric constants */
{
	<INT: (["0"-"9"])+>
}

TOKEN: /* special characters */
{
	<SEMICOLON: ";">
	| <LPAREN: "(">
	| <RPAREN: ")">
	| <LBRACKET: "{">
	| <RBRACKET: "}">
	| <EQUAL: "=">
}

void program(): {} {
	(statement())+ <EOF>
}

void statement(): {} {
	compound_statement()
	| <WHILE> test() statement()
	| <IF> test() {IIG.if1(model);} statement() [<ELSE> {IIG.if2(model);} statement()] {IIG.if3(model);}
	| expression() <SEMICOLON>
	| <BREAK> <SEMICOLON>
	| <RETURN> expression() <SEMICOLON> 
	| <CONTINUE> <SEMICOLON> 
	| <SEMICOLON>
}

void compound_statement(): {} {
	<LBRACKET> (statement())* <RBRACKET>
}

void test(): {} {
	<LPAREN> expression() <RPAREN>
}

void expression(): {Token x;} {
	(x = <ID> {IIG.expression1(model, x);} "=" expression() {IIG.expression2(model);})
	| condition()
}

void condition(): {} {
	disjunction() ["?" expression() ":" condition()]
}

void disjunction(): {} {
	conjunction() ("|" conjunction())*
}

void conjunction(): {} {
	comparison() ("&" comparison())* 
}

void comparison(): {} {
	relation() ["==" relation()]
}

void relation(): {} {
	sum() [relation_operator() sum()]
}

void sum(): {String operator;} {
	term() (operator = add_operator() term() {IIG.add(model, operator);})*
}

void term(): {String operator;} {
	factor() (operator = mul_operator() factor() {IIG.multiply(model, operator);})*
}

void factor(): {} {
	primary() | (unary_operator() primary())
}

void primary(): {Token x;} {
	x = <ID> {IIG.pushID(model, x);}
	| x = <INT> {IIG.pushInt(model, x);}
	| (<LPAREN> expression() <RPAREN>)
}

String relation_operator(): {Token x;} {
	x = "<" {return x.image;}
	| x = ">" {return x.image;}
	| x = ">=" {return x.image;}
	| x = "<=" {return x.image;}
}

String mul_operator(): {Token x;} {
	x = <MULTIPLY> {return x.image;}
	| x = <DIVIDE> {return x.image;}
	| x = <MOD> {return x.image;}
}

String add_operator(): {Token x;} {
	x = <PLUS> {return x.image;}
	| x = <MINUS> {return x.image;}
	// "+" | "-"
}

String unary_operator(): {Token x;} {
	x = <MINUS> {return x.image;}
	| x = <UBANG> {return x.image;}	
}